import os
import asyncio
from utils import *
from info import *
from pyrogram import Client, filters 
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton 
from pyrogram.types import Message, User, ChatJoinRequest

@Client.on_message(filters.command("start") & ~filters.channel)
async def start(bot, message):
    await add_user(message.from_user.id, message.from_user.first_name)
    await message.reply(text=script.START.format(message.from_user.mention),
                        disable_web_page_preview=True,
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('B·¥ú è S·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥', callback_data="misc_buymoney")]]))
                                                         
   
 
@Client.on_message(filters.command("help"))
async def help(bot, message):
    await message.reply(text=script.HELP, 
                        disable_web_page_preview=True)

@Client.on_message(filters.command("stats") & filters.user(ADMIN))
async def stats(bot, message):
    g_count, g_list = await get_groups()
    u_count, u_list = await get_users()
    await message.reply(script.STATS.format(u_count, g_count))

@Client.on_message(filters.command("id"))
async def id(bot, message):
    text = f"Current Chat ID: `{message.chat.id}`\n"
    if message.from_user:
       text += f"Your ID: `{message.from_user.id}`\n"
    if message.reply_to_message:
       if message.reply_to_message.from_user:
          text += f"Replied User ID: `{message.reply_to_message.from_user.id}`\n"
       if message.reply_to_message.forward_from:
          text += f"Replied Message Forward from User ID: `{message.reply_to_message.forward_from.id}`\n"
       if message.reply_to_message.forward_from_chat:
          text += f"Replied Message Forward from Chat ID: `{message.reply_to_message.forward_from_chat.id}\n`"
    await message.reply(text)

@Client.on_callback_query(filters.regex(r"^misc"))
async def misc(bot, update):
    data = update.data.split("_")[-1]
    if data == "home":
        await update.message.edit(
            text=script.START.format(update.from_user.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(" ú·¥á ü·¥ò", callback_data="misc_help"),
                                                InlineKeyboardButton(" ô·¥ú è", callback_data="misc_buymoney")]])
        )
    elif data == "help":
        await update.message.edit(
            text=script.HELP,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è B·¥Ä·¥Ñ·¥ã", callback_data="misc_home")]])
        )
    elif data == "buymoney":
        await update.message.edit(
            text=script.BUY.format((await bot.get_me()).mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("QR ·¥Ñ·¥è·¥Ö·¥á", callback_data="buy_qr")],[
         InlineKeyboardButton("UPI …™·¥Ö", callback_data="buy_upi")],[
         InlineKeyboardButton("M·¥Ö…™s·¥ã V…™·¥á·¥°s", callback_data="buy_mdisk")]
    ])) 

         
@Client.on_message(filters.command("buy"))
async def buy(bot, message):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("QR ·¥Ñ·¥è·¥Ö·¥á", callback_data="buy_qr")],[
            InlineKeyboardButton("UPI …™·¥Ö", callback_data="buy_upi")],[
            InlineKeyboardButton("M·¥Ö…™s·¥ã V…™·¥á·¥°s", callback_data="buy_mdisk")]
        ])
        await message.reply("H·¥è·¥° ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ò·¥Ä è?", reply_markup=keyboard)


@Client.on_callback_query(filters.regex(r"^buy"))
async def process_buy(bot, update):
    data = update.data.split("_")[-1]
    if data == "qr":
        # send photo
        photo_url = f"{UPI_PIC}"  # replace with your QR image URL
        await bot.send_photo(chat_id=update.message.chat.id, photo=photo_url)
        text = "P·¥Ä è ùü∏ùü∂ R·¥ú·¥ò·¥ò·¥á ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ s·¥á…¥·¥Ö ·¥Ä s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ ·¥è“ì ·¥õ ú·¥á ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ  ô·¥á ü·¥è·¥°, ·¥Ä…¥·¥Ö ·¥Ä üs·¥è ·¥ò Ä·¥è·¥†…™·¥Ö·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ID s·¥è I ·¥Ñ·¥Ä…¥ ·¥†·¥á Ä…™“ì è A“ì·¥õ·¥á Ä S·¥á…¥·¥Ö…™…¥…¢ V·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ R·¥á«´·¥ú·¥ás·¥õ."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("S·¥á…¥·¥Ö S·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ", url=f'https://t.me/{OWNER_USERNAME}')]
        ])
        await bot.send_message(chat_id=update.message.chat.id, text=text, reply_markup=keyboard)
    elif data == "upi":
        # send message and button
        text = "'s·¥è Ä Ä è\nP·¥Ä è' 20 R·¥ú·¥ò·¥ò·¥á O…¥ `harikushal234@okicici` ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ s·¥á…¥·¥Ö ·¥Ä s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ ·¥è“ì ·¥õ ú·¥á ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ  ô·¥á ü·¥è·¥°, ·¥Ä…¥·¥Ö ·¥Ä üs·¥è ·¥ò Ä·¥è·¥†…™·¥Ö·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ID A“ì·¥õ·¥á Ä S·¥á…¥·¥Ö…™…¥…¢ V·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ R·¥á«´·¥ú·¥ás·¥õ. ·¥Ñ·¥Ä…¥ ·¥†·¥á Ä…™“ì è ·¥õ ú·¥á ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("S·¥á…¥·¥Ö S·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ", url=f'https://t.me/{OWNER_USERNAME}')]
        ])
        await bot.send_message(chat_id=update.message.chat.id, text=text, reply_markup=keyboard)
    elif data == "mdisk":
        # send message and button
        text = "S·¥á…¥·¥Ö 2000 V…™·¥á·¥°s T·¥è ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ s·¥á…¥·¥Ö ·¥Ä M·¥áss·¥Ä…¢·¥á T·¥è T ú·¥á B·¥è·¥õ O·¥°…¥·¥á Ä."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Message", url=f'https://t.me/{OWNER_USERNAME}')]
        ])
        await bot.send_message(chat_id=update.message.chat.id, text=text, reply_markup=keyboard)

 
@Client.on_message(filters.command('leave') & filters.private &  filters.chat(ADMIN))
async def leave_a_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('G…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat = int(chat)
    except:
        chat = chat
    try:
        buttons = [[
            InlineKeyboardButton('ùöÇùöÑùôøùôøùôæùöÅùöÉ', url=f'https://t.me/{OWNER_USERNAME}')
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat,
            text='<b>H·¥á ü ü·¥è F Ä…™·¥á…¥·¥Ös, \nM è ·¥Ä·¥Ö·¥ç…™…¥  ú·¥Äs ·¥õ·¥è ü·¥Ö ·¥ç·¥á ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò s·¥è …™ …¢·¥è! I“ì  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥Ä…¢·¥Ä…™…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è O·¥°…¥·¥á Ä.</b>',
            reply_markup=reply_markup,
        )

        await bot.leave_chat(chat)
        await message.reply(f" ü·¥á“ì·¥õ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ `{chat}`")
    except Exception as e:
        await message.reply(f'Error - {e}')

@Client.on_message(filters.command("gsend") & filters.private &  filters.chat(ADMIN))
async def send_chatmsg(bot, message):
    if message.reply_to_message:
        target_id = message.text
        command = ["/gsend"]
        for cmd in command:
            if cmd in target_id:
                target_id = target_id.replace(cmd, "")
        success = False
        try:
            chat = await bot.get_chat(int(target_id))
            await message.reply_to_message.copy(int(chat.id))
            success = True
        except Exception as e:
            await message.reply_text(f"<b>E Ä Ä·¥è Ä :- <code>{e}</code></b>")
        if success:
            await message.reply_text(f"<b>Y·¥è·¥ú Ä M·¥áss·¥Ä…¢·¥á H·¥Äs B·¥á·¥á…¥ S·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è S·¥á…¥·¥Ö To {chat.id}.</b>")
        else:
            await message.reply_text("<b>A…¥ E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö !</b>")
    else:
        await message.reply_text("<b>C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö I…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á...</b>")

@Client.on_chat_join_request(filters.group | filters.channel)
async def autoapprove(client, message: ChatJoinRequest):
    chat = message.chat 
    user = message.from_user 
    print(f"{user.first_name} J·¥è…™…¥·¥á·¥Ö (·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö)") 
    await client.approve_chat_join_request(chat_id=chat.id, user_id=user.id)
    if APPROVE == "on":
        await client.send_message(chat_id=chat.id, text=APPROVETEXT.format(mention=user.mention, title=chat.title))

@Client.on_message(filters.command("start") & ~filters.channel)
async def start(bot, message):
    await add_user(message.from_user.id, message.from_user.first_name)
    await message.reply(text=script.START.format(message.from_user.mention),
                        disable_web_page_preview=True,
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚áÑ  ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò  ‚áÑ', url=f'http://telegram.me/Post_Search_HK_bot?startgroup=true')
            ],[InlineKeyboardButton(" ú·¥á ü·¥ò", url="https://t.me/TG_UPDATES1"),

InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data="misc_help")],[InlineKeyboardButton('‚ùÇ   ·¥è·¥ú Ä  ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±  ·¥Ñ ú·¥Ä…¥…¥·¥á ü   ‚ùÇ', url=f'https://t.me/+mQ6JOFRldHs5Y2M1')]]))  
@Client.on_message(filters.command("help"))
async def help(bot, message):
    await message.reply(text=script.HELP,
                        disable_web_page_preview=True)

@Client.on_message(filters.command("about"))
async def about(bot, message):
    await message.reply(text=script.ABOUT.format((await bot.get_me()).mention),
                        disable_web_page_preview=True)

@Client.on_message(filters.command("stats") & filters.user(ADMIN))
async def stats(bot, message):
    g_count, g_list = await get_groups()
    u_count, u_list = await get_users()
    await message.reply(script.STATS.format(u_count, g_count))

@Client.on_message(filters.command("id"))
async def id(bot, message):
    text = f"<b>‚û≤  ·¥Ñ ú·¥Ä·¥õ …™·¥Ö:-</b>  `{message.chat.id}`\n"
    if message.from_user:
       text += f"<b>‚û≤   è·¥è·¥ú Ä …™·¥Ö:-</b> `{message.from_user.id}`\n"
    if message.reply_to_message:
       if message.reply_to_message.from_user:
          text += f"<b>‚û≤   Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥úÍú±·¥á Ä …™·¥Ö:-</b> `{message.reply_to_message.from_user.id}`\n"
       if message.reply_to_message.forward_from:
          text += f"<b>‚û≤   Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö Íú∞ Ä·¥è·¥ç ·¥úÍú±·¥á Ä …™·¥Ö:-</b> `{message.reply_to_message.forward_from.id}`\n"
       if message.reply_to_message.forward_from_chat:
          text += f"<b>‚û≤   Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ …™·¥Ö:-</b> `{message.reply_to_message.forward_from_chat.id}\n`"
    await message.reply(text)

@Client.on_callback_query(filters.regex(r"^misc"))
async def misc(bot, update):
    data = update.data.split("_")[-1]
    if data=="home":
       await update.message.edit(text=script.START.format(update.from_user.mention),
                                 disable_web_page_preview=True,
                                 reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚áÑ  ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò  ‚áÑ', url=f'http://telegram.me/Post_Search_HK_bot?startgroup=true')
            ],[InlineKeyboardButton(" ú·¥á ü·¥ò", url="https://t.me/+mQ6JOFRldHs5Y2M1"),

InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data="misc_help")],[InlineKeyboardButton('‚ùÇ   ·¥è·¥ú Ä  ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±  ·¥Ñ ú·¥Ä…¥…¥·¥á ü   ‚ùÇ', url=f'https://t.me/+mQ6JOFRldHs5Y2M1')]])) 
    elif data=="help":
       await update.message.edit(text=script.HELP, 
                                 disable_web_page_preview=True,
                                 reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üßë‚Äçüíª   ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ·¥õ·¥è  ·¥è·¥°…¥·¥á Ä   üßë‚Äçüíª',url='https://t.me/KUSHALHK')],[InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="misc_home"),InlineKeyboardButton("…¥·¥áx·¥õ", url="https://t.me/+mQ6JOFRldHs5Y2M1")]])) 


    elif data=="about":
        await update.message.edit(text=script.ABOUT.format((await bot.get_me()).mention), 
                                  disable_web_page_preview=True,
                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="misc_home")]]))
         
@Client.on_message(filters.command("follow"))
async def follow_msg(bot, message):
    btn = [[
        InlineKeyboardButton(text="·¥õ·¥°…™·¥õ·¥õ·¥á Ä", url="https://t.me/+mQ6JOFRldHs5Y2M1"),
        InlineKeyboardButton(text="…™…¥Íú±·¥õ·¥Ä…¢ Ä·¥Ä·¥ç", url="https://t.me/+mQ6JOFRldHs5Y2M1")
        ],[
        InlineKeyboardButton(text="…¢…™·¥õ ú·¥ú ô  ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ", url="https://github.com/KUSHALHK")
    ],[
        InlineKeyboardButton(text="·¥è·¥ú Ä  ·¥èÍú∞Íú∞…™·¥Ñ…™·¥Ä ü  ·¥°·¥á ôÍú±…™·¥õ·¥á", url="https://t.me/+mQ6JOFRldHs5Y2M1")
    ],[
        InlineKeyboardButton(text="Íú±·¥ú ôÍú±·¥Ñ Ä…™ ô·¥á  ·¥è·¥ú Ä   è·¥õ  ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://youtube.com")
    ],[
        InlineKeyboardButton(text=" Ä·¥á·¥†…©·¥á·¥°Íú±", url="https://t.me/+mQ6JOFRldHs5Y2M1"),
        InlineKeyboardButton(text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±", url="https://t.me/TG_UPDATES1")
    ]]
    yt = await message.reply_photo(photo='https://telegra.ph/file/b681d379605d3d3a9fa1c.jpg', caption="<b>·¥è·¥ú Ä  Íú±·¥è·¥Ñ…™·¥Ä ü  ·¥ç·¥á·¥Ö…™·¥Ä  ·¥ò ü·¥Ä·¥õÍú∞·¥è Ä·¥çÍú±</b>", reply_markup=InlineKeyboardMarkup(btn))
    await asyncio.sleep(500)
    await yt.delete()
    await message.delete()

@Client.on_message(filters.private & filters.text & filters.incoming)
async def pm_text(bot, message):
    content = message.text
    user = message.from_user.first_name
    user_id = message.from_user.id
    if content.startswith("/") or content.startswith("#"): return  # ignore commands and hashtags
    await message.reply_text(
         text="<b> ú è,\n\n…™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥ç·¥è·¥†…™·¥ás / s·¥á Ä…™·¥ás ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ Íú∞…™ Äs·¥õ  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥è Ä ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç …™…¥  ô·¥è·¥õ ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ s·¥á·¥Ñ·¥è…¥·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥</b>",   
         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìù   Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥á Ä·¥á ", url=f"https://t.me/+Ul_owPNY0xQzOTRl")],[InlineKeyboardButton("üßë‚Äçüíª   ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ", url=f"https://t.me/KUSHALHK")]]), disable_web_page_preview=True
    )
    await bot.send_message(
        chat_id=LOG_CHANNEL,
        text=f"<b>#ùêåùêíùêÜ\n\nN·¥Ä·¥ç·¥á : {user}\n\nID : {user_id}\n\nM·¥áss·¥Ä…¢·¥á : {content}</b>"
    )
